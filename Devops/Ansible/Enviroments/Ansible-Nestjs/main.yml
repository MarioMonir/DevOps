# Build / Deploy Steps :
# -------------------------------
# 1  - install required packages:
#     => nginx, certbot, python3-certbot-ngin, curl, unzip
# 2  - Install Node js Repo
# 3  - Install Node js
# 4  - Start Nginx Server
# 5  - Template project Nginx config
# 6  - Setup Certbot for Nginx ( ssl ceritficate for app domain )
# 7  - Restart Nginx Server
# 8  - Create app directory if not exist
# 9  - Pull / Clone Repo if not exist
# 10 - Install pm2 then UnZip build then Serve app by PM2

# = = = = = = = = = = = = = = = = = = = = =  = = = = = = = = = = = = =

- name: Install Nginx, Node, Certbot Enviroment
  hosts: all
  become: true
  gather_facts: false

  # =====================================================

  vars:
    project_name: "sal-api"
    project_port: "5000"
    project_path: "/home/ubuntu/sal/"
    project_domain: "sal-api.techhive.dev"
    project_email: "techivedevs@gmail.com"
    project_repo: "git@github.com:TechHiveDev/{{ project_name }}.git"
    node_version: "16"
    db_user: "{{ project_name }}"
    db_password: "{{ project_name }}_P@ssw0rd"

  # =====================================================

  tasks:
    - name: Ensure Required Packages is Installed
      ansible.builtin.package:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      with_items:
        - nginx
        - certbot
        - python3-certbot-nginx
        - curl

    # - - - - - - - - - - - - - - - - - -

    - name: Ensure Node Js Repo is Installed
      ansible.builtin.shell: >
        curl -sL https://deb.nodesource.com/setup_{{ node_version }}.x | bash -

    # - - - - - - - - - - - - - - - - - -

    - name: Ensure Node Js is Installed
      ansible.builtin.package:
        name: nodejs
        state: latest

    # - - - - - - - - - - - - - - - - - -

    - name: Ensure Nginx Service is Stared
      ansible.builtin.service:
        name: nginx
        state: started

    # # - - - - - - - - - - - - - - - - - -

    - name: "Template the nginx {{ project_name }}.conf"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/nginx.conf.j2"
        dest: "/etc/nginx/conf.d/{{ project_name }}.conf"

    # - - - - - - - - - - - - - - - - - -

    - name: "Create a {{ project_path }} nginx log directory if not exist"
      ansible.builtin.file:
        path: "/var/log/nginx/{{ project_name }}"
        state: directory
        mode: "0755"

    # - - - - - - - - - - - - - - - - - -

    - name: Setup Certbot for Nginx
      ansible.builtin.shell: >
        certbot --nginx
        -d {{ project_domain }}
        -m {{ project_email }}
        --non-interactive --agree-tos

    # - - - - - - - - - - - - - - - - - -

    - name: Ensure Nginx Service is Restared
      ansible.builtin.service:
        name: nginx
        state: restarted

    # - - - - - - - - - - - - - - - - - -

    - name: "Create a {{ project_path }} directory if not exist"
      ansible.builtin.file:
        path: "{{ project_path }}"
        state: directory
        mode: "0755"

    # - - - - - - - - - - - - - - - - - -

    - name: Pull / Clone Repo if not exist
      ansible.builtin.git:
        repo: "{{ project_repo }}"
        dest: "{{ project_path }}{{ project_name }}"

    # - - - - - - - - - - - - - - - - - -

    - name: "Template the .env file"
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/dotenv.j2"
        dest: "{{ project_path }}{{ project_name }}/.env"

    # - - - - - - - - - - - - - - - - - -

    - name: "Install yarn then project packages"
      ansible.builtin.shell: |
        # Install yarn
        npm install --global yarn

        # Enter Project Path
        cd {{ project_path }}{{ project_name }}

        # Install project packages
        yarn

    # # - - - - - - - - - - - - - - - - - -

    # # - name: "create mysql user"
    # #   ansible.builtin.shell: |

    # # - - - - - - - - - - - - - - - - - -

    # # - name: "Install pm2 then UnZip build then Serve app by PM2"
    # #   ansible.builtin.shell: |
    # #     # Install PM2 / serve node modules
    # #     npm install pm2 serve -g

    # #     # Enter Project Path
    # #     cd {{ project_path }}{{ project_name }}

    # #     # UnZip the build file
    # #     unzip -o build.zip

    # #     # Delete the server process if exist nad start it
    # #     pm2 delete -s {{ project_name }} || :
    # #     pm2 start "npm run serve" --name {{ project_name }}

    # # - - - - - - - - - - - - - - - - - -
